name: CI

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main
jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.9
    - name: Install Poetry and add to path
      run: |
        curl -sSL https://install.python-poetry.org/install-poetry.py | python -
        echo "${HOME}/.local/bin" >> $GITHUB_PATH
    - name: Configure poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true
    - name: Install Dependencies
      run: |
        poetry install -E pydantic
    - name: mypy check
      run: |
        poetry run mypy camel_converter
  testing:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11.0-rc.1"]
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get full Python version
      id: full-python-version
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")
    - name: Install Poetry and add to path on Windows
      if: matrix.os == 'windows-latest'
      run: |
        (Invoke-WebRequest -Uri https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py -UseBasicParsing).Content | python -
        echo "${HOME}\AppData\Roaming\Python\Scripts" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo ${HOME}\AppData\Roaming\Python\Scripts
    - name: Install Poetry and add to path on Mac and Linux
      if: matrix.os != 'windows-latest'
      run: |
        curl -sSL https://install.python-poetry.org/install-poetry.py | python -
        echo "${HOME}/.local/bin" >> $GITHUB_PATH
    - name: Configure poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true
    - name: Install Dependencies
      run: poetry install -E pydantic
    - name: Test with pytest
      run: |
        poetry run pytest --cov=camel_converter --cov-report=xml
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        fail_ci_if_error: true
